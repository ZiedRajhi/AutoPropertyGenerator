using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Text;

namespace AutoPropertyGenerator
{
    [Generator]
    public class AutoPropertyGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not SyntaxReceiver receiver)
                return;

            foreach (var classDeclaration in receiver.CandidateClasses)
            {
                var className = classDeclaration.Identifier.Text;
                var source = GenerateClassCode(className);

                context.AddSource($"{className}_AutoProperties.g.cs", SourceText.From(source, Encoding.UTF8));
            }
        }

        private string GenerateClassCode(string className)
        {
            return $@"
using System;

namespace AutoPropertyGenerator
{{
    public partial class {className}
    {{
        public string AutoGeneratedProperty {{ get; set; }} = ""Generated!"";
    }}
}}";
        }
    }

    class SyntaxReceiver : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> CandidateClasses { get; } = new();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax classDeclaration &&
                classDeclaration.AttributeLists
                    .SelectMany(a => a.Attributes)
                    .Any(a => a.Name.ToString() == "AutoProperty"))
            {
                CandidateClasses.Add(classDeclaration);
            }
        }
    }
}
